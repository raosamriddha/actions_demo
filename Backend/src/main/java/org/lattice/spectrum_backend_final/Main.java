package org.lattice.spectrum_backend_final;


import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;
import org.glassfish.jersey.servlet.ServletContainer;
import org.lattice.spectrum_backend_final.dao.constants.ApiConstant;
import org.lattice.spectrum_backend_final.dao.manager.DbConnectionManager;
import org.lattice.spectrum_backend_final.dao.manager.LogManager;
import org.lattice.spectrum_backend_final.dao.util.BasicUtility;
import org.lattice.spectrum_backend_final.dao.util.EncryptDB;
import org.lattice.spectrum_backend_final.dao.util.GitCommitUtil;

import com.corundumstudio.socketio.Configuration;
import com.corundumstudio.socketio.SocketIOServer;
import org.lattice.spectrum_backend_final.dao.util.Logger;

/**
 * @author RAHUL KUMAR MAURYA
 */

public class Main {

	public static void main(String[] args) {

		SocketIOServer socketServer = null;
		Server server = null;

		try {
			System.out.println("jetty server started");
			// to update latest git commit file
			new GitCommitUtil().start();

			// encryption process
			if (!EncryptDB.isEncryptPropertiesExists()) {
				// if encrypt.properties file doesn't exists, create it
				if (!EncryptDB.createEncryptProperties()) {
					throw new RuntimeException(ApiConstant.ERROR_ENCRYPT_PROPERTIES_NOT_FOUND);
				}
			}
			if (EncryptDB.isTempFileExists()) {
				EncryptDB.deleteFailedDBFile(ApiConstant.TEMPORARY_DB_NAME);
			}
			EncryptDB.encryptDatabase();

			// set kfcomm version info
			DbConnectionManager.getInstance().setKfCommVersion(BasicUtility.getInstance().getKfcommInfo());

			// code for websocket
			Configuration configuration = new Configuration();
//            configuration.setHostname(ApiConstant.LOCALHOST);
			configuration.setPort(ApiConstant.WEB_SOCKET_PORT);
			socketServer = new SocketIOServer(configuration);

			// code for jetty
			server = new Server(ApiConstant.JETTY_PORT);

			ServletContextHandler context = new ServletContextHandler(ServletContextHandler.NO_SESSIONS);

			context.setContextPath(ApiConstant.ROOT_PATH);
			server.setHandler(context);

			ServletHolder serHol = context.addServlet(ServletContainer.class, ApiConstant.REST_PATH);
			serHol.setInitOrder(1);
			serHol.setInitParameter(ApiConstant.JERSEY_CONFIG_SERVER_PROVIDER_PACKAGES,
					ApiConstant.ORG_LATTICE_SPECTRUM_BACKEND_FINAL);

			// prevent system from sleep
//            SleepManager.getInstance().preventSleep();

			// delete older auto generated logs
			LogManager.getInstance().deleteAutoGeneratedLogFiles();

			SocketEvent.events(socketServer);

			socketServer.start();

			System.out.println("Websocket server started at " + configuration.getPort());

			server.start();
			Thread.sleep(Integer.MAX_VALUE);
			server.join();

		} catch (Exception ex) {
			Logger.error("Server running failed.", ex);
			if (server != null) {
				server.destroy();
				socketServer.stop();
			}
		}

	}

}
